import logging
import asyncio
import os
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# Telegram —Ç–æ–∫–µ–Ω –∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
API_TOKEN = "8155269556:AAF1PyQHfNl77ButkzhhT0jNJRpJh5DkX0g"
ADMIN_IDS = [7561197665, 736348190]  # —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤

# Telegram –±–æ—Ç
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üìû –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")]],
    resize_keyboard=True
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
user_states = {}
user_questions = {}
pending_payments = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –±–æ—Ç! –ú—ã –ø–æ–º–æ–≥–∞–µ–º –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É.\n\n""üí∞–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ‚Äî 49 —Å–æ–º.\n\n""üîΩ–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=main_menu
    )

# –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
@dp.message(F.text == "üìû –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
async def start_consultation(message: types.Message):
    user_states[message.chat.id] = "waiting_for_question"
    await message.answer("‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ–±—ã —é—Ä–∏—Å—Ç –º–æ–≥ –±—ã—Å—Ç—Ä–æ –ø–æ–º–æ—á—å.\n\n"
                        "üîΩ –ü—Ä–∏–º–µ—Ä: \"–ú–µ–Ω—è —Ö–æ—Ç—è—Ç —É–≤–æ–ª–∏—Ç—å –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?\"")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
@dp.message(lambda message: user_states.get(message.chat.id) == "waiting_for_question")
async def receive_question(message: types.Message):
    chat_id = message.chat.id
    user_states[chat_id] = None
    user_questions[chat_id] = message.text

    pay_buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ M Bank", url="https://app.mbank.kg/qr/")],
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ O!Bank", url="https://api.dengi.o.kg/")],
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Bakai Bank", url="https://bakai24.app")],
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid")]
    ])

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n" + message.text)
    await message.answer("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ‚Äî *49 —Å–æ–º*\n\n""üîê –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —é—Ä–∏—Å—Ç –ø–æ–ª—É—á–∏—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç–∏—Ç –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏..\n\n"
    "üìå *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:*\n"
    "‚Ä¢ M –ë–∞–Ω–∫: `+996704806488`\n"
    "‚Ä¢ O! –ë–∞–Ω–∫: `+996704806488`\n\n"
    "üîΩ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ:", parse_mode="Markdown", reply_markup=pay_buttons)

# –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–Ø –æ–ø–ª–∞—Ç–∏–ª"
@dp.callback_query(F.data == "paid")
async def handle_paid_button(call: types.CallbackQuery):
    user = call.from_user
    chat_id = call.message.chat.id
    question = user_questions.get(chat_id, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    pending_payments[chat_id] = question

    await call.message.answer("–ú—ã —É–≤–µ–¥–æ–º–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –≤–∞—à–µ–π –æ–ø–ª–∞—Ç–µ.\n\n""‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–æ–±—ã—á–Ω–æ 1‚Äì5 –º–∏–Ω—É—Ç).")
    await call.answer()

    for admin_id in ADMIN_IDS:
        confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{chat_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{chat_id}")
            ]
        ])
        await bot.send_message(
            admin_id,
            f"üí∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or user.first_name} —Å–æ–æ–±—â–∏–ª –æ–± –æ–ø–ª–∞—Ç–µ.\n\nüì© –í–æ–ø—Ä–æ—Å:\n{question}",
            reply_markup=confirm_keyboard
        )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
@dp.callback_query(lambda c: c.data.startswith("confirm_"))
async def confirm_payment(call: types.CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    chat_id = int(call.data.split("_")[1])
    question = pending_payments.pop(chat_id, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    user = await bot.get_chat(chat_id)

    contact_button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì® –ù–∞–ø–∏—Å–∞—Ç—å —é—Ä–∏—Å—Ç—É", url="https://t.me/lawbot_kg")]
    ])

    await bot.send_message(chat_id, "‚úÖ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –Æ—Ä–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=contact_button)
    await call.message.answer("‚òëÔ∏è –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    await call.answer()

# –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
@dp.callback_query(lambda c: c.data.startswith("reject_"))
async def reject_payment(call: types.CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    chat_id = int(call.data.split("_")[1])
    pending_payments.pop(chat_id, None)
    await bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à—É –æ–ø–ª–∞—Ç—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n\n"
    "–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—Å—ë –æ–ø–ª–∞—Ç–∏–ª–∏ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: [@lawbot_kg](https://t.me/lawbot_kg)", parse_mode="Markdown")
    await call.message.answer("‚õî –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    await call.answer()

# –ö–æ–º–∞–Ω–¥–∞ /admin
@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üïí –ó–∞—è–≤–∫–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏", callback_data="view_pending")]
    ])
    await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫
@dp.callback_query(F.data == "view_pending")
async def view_pending(call: types.CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    if not pending_payments:
        await call.message.answer("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏.")
        return

    for chat_id, question in pending_payments.items():
        confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{chat_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{chat_id}")
            ]
        ])
        await call.message.answer(f"üßæ –ó–∞—è–≤–∫–∞ –æ—Ç ID {chat_id}:\n{question}", reply_markup=confirm_keyboard)

    await call.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
